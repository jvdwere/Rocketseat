Callback em inglês significa chamar de volta.

Como já citado antes, funções são um tipo de dado, isso significa que uma função pode
 pode ser passada para dentro de outra, Callback nada mais é do que uma função dentro 
 de outra como parâmetro. Veja a seguinte estrutura.

    Exemplo JS-1 isso é uma Callback
         
         function carros(modelo) {

            console.log('antes de ter um carro')
            modelo()
            console.log('agora tenho um carro')
        
        }

        carros(() => {console.log("Ferrari")})

    Eu vou chamar uma função e "chamar outra de volta".
    Compare com essa outra estrutura
    
        Exemplo JS-2 isso não é uma Callback
        
            function carros(modelo) {

                console.log('antes de ter um carro')

                function modelo() {
                    console.log("Ferrari")
                    }

                modelo()

                console.log('agora tenho um carro')
            }
            carros()

O JavaScript executa o código sequencialmente em uma ordem de cima para baixo. No 
 entanto, existem alguns casos em que o código é executado (ou deve ser executado) 
 depois que algo acontece e de modo não sequencial. Isso é chamado de programação 
 assíncrona.

Callbacks garantem que uma função não seja executada antes que uma tarefa, seja 
 concluída, mas logo depois dessa tarefa ser concluída. Elas nos ajudam a desenvolver
 código JavaScript assíncrono e evitam que tenhamos problemas e erros.

Em JavaScript, o jeito de criar uma função de callback é passá-la como um parâmetro 
 para outra função, chamando-a novamente em seguida, logo depois que algo aconteça ou 
 que alguma tarefa seja concluída.

Callbacks não precisam necessariamente ser arrow functions, apesar de ser mais comum
 encontrá-las assim.

Callbacks também são utilizadas com eventos.
  
Eventos:
    JavaScript é uma linguagem de programação orientada a eventos. Nós também usamos 
     funções de callback para declarações de eventos. Por exemplo, digamos que 
     queremos que os usuários cliquem em um botão e eu determinei que alguma função 
     seja chamada a partir dessa interação, para isso temos o evento:

       onclik(()=>{
        console.log("Hello Word")
       })
    
    Porem isso envolve componentes html e não veremos isso agora

